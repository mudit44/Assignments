mean_m <- mean(factory_work['Mathew',])
mean_p <- mean(factory_work['Philips',])
mean_m
mean_p
median(factory_work['Mathew',])
median(factory_work['Philips',])
range(factory_work["Mathew",])
range(factory_work["Philip",])
range_philip <- max(factory_work["Philip",]) - min(factory_work["Philip",])
range_philip
median(factory_work['Mathew',])
median(factory_work['Philips',])
range(factory_work["Mathew",])
range(factory_work["Philips",])
sd_philip <- sqrt(sum((factory_work["Mathew",]) - mean(factory_work["Mathew",]))^2/ncol(factory_work))
sd_philip
sd_mathew <- sqrt(sum((factory_work["Mathew",]) - mean(factory_work["Mathew",]))^2/ncol(factory_work))
sd_philip
sd_mathew
sd_philips
sd_philips <- sqrt(sum((factory_work["Philips",])- mean(factory_work["Philips",]))^2/ncol(factory_work))
sd_philips
a <- range(1:10)
a
a <- range(1:10)
a <- range(1:10)a
a
a <- 1:10
a
max(a)
range_a <- max(a) - min(a)
b <- 101:105
range_b <- max(b) - min(b)
range_total <- range_a + range_b
range_total
A <- matrix(data = c([1,2,3,4,5,6]), nrow = 2, ncol = 3, byrow = TRUE)
A <- matrix(data = c(1,2,3,4,5,6), nrow = 2, ncol = 3, byrow = TRUE)
A
B
B <- matrix(data = c(1,2,3,4,5,6,7,8,9,10), nrow = 3, ncol = 4, byrow = TRUE)
B <- matrix(data = c(1,2,3,4,5,6,7,8,9,10,11,12), nrow = 3, ncol = 4, byrow = TRUE)
B
A %*% B
attach.mtcars()
attach(mtcars)
library(help = "datasets")
attach(mtcars)
cars_data = mtcars
head(mtcars)
head(mtcars)[0]
str(mtcars)
c <- 1:10
d <- 101:105
e <- c + d
e
str(mtcars)
summary(mtcars)
names(mtcars)
cars_data[c(2,8:11)] <- data.frame(apply(data_cars[c(2,8:11)],2,as.character))
cars_data[c(2,8:11)] <- data.frame(apply(cars_data[c(2,8:11)],2,as.character))
t = cars_data[c(2,8:11)] <- data.frame(apply(cars_data[c(2,8:11)],2,as.character))
t
str(cars_data)
dbinom(4,10,0.6)
barplot(geom_distrib, col='blue', xlab='Number of trials', ylab = 'Probability')
geom_distrib = dgeom(x=0:10,prob=0.15)
barplot(geom_distrib, col='blue', xlab='Number of trials', ylab = 'Probability')
#Ans3
dpois(3,5)
#Ans4
dpois(5,1.8)
#Ans4
dpois(5,3.6)
#Ans5
dexp(1,0.5)
#Ans5
1 - pexp(2,0.5)
#Ans5
pexp(2,0.5)
#Ans6
v = c[82,72,85,14,66,15,23,78,16,38,92,17]
#Ans6
v = c[(82,72,85,14,66,15,23,78,16,38,92,17)]
#Ans6
v = c(82,72,85,14,66,15,23,78,16,38,92,17)
v
mean_v = v.mean
mean_v = mean(v)
mean_v
sd(v)
z_score = ((v - mean_v)/t)
z_score = (v - mean_v)/t
z_score = v - mean_v
z_score
z_score/t
t = sd(v)
z_score/t
z_score = ((v - mean_v)/t)
z_score = ((v - mean_v)/t)
z_score
#Ans7
zscore_a = (75-70)/20
zscore_b = (55-40)/10
zscore_a
zscore_b
#Ans8
1-pnorm(72,67.2,5.41)
1-pnorm(5.41)
#Ans8
1-pnorm(72,67.2,5.41)
#Ans8
1-pnorm(72,67.2,5.41,lower.tail = FALSE)
#Ans8
1-pnorm(72,67.2,5.41)
#Ans9
pnorm(mean = 500,sd = 100) * 10000
#Ans9
pnorm(500,100) * 10000
#Ans9
pnorm(500,100) * 10000
#Ans9
pnorm(0,500,100) * 10000
#Ans9
(0,0,1) * 10000
#Ans9
pnorm(0,0,1) * 10000
#2
pnorm(0,0,1)
#2
pnorm(0,0,1) * 10000
#3
pnorm(-1.5,0,1) * 10000
pnorm(0.5,0,1) * 10000
#3
(pnorm(-1.5,0,1) * 10000) - (pnorm(0.5,0,1) * 10000)
#3
(pnorm(0.5,0,1) * 10000) - (pnorm(-1.5,0,1) * 10000)
#Ans9
#1 part
pnorm(0,0,1) * 10000
#2
pnorm(0,0,1) * 10000
#3
(pnorm(0.5,0,1) * 10000) - (pnorm(-1.5,0,1) * 10000)
load(file = mtcars)
load(database = mtcars)
data1 = mtcars
data1
data.frame(row.names = c(1,2,3))
d = data.frame(row.names = c(1,2,3))
d
d = data.frame(row.names = c(1,2,3), colnames(c("Age","Marks","Gender")))
d <- data.frame(age=c(10,11,12),marks=c(21,34,36),gender=c(1,1,2))
d
d$edu = as.factor(d$edu)
data1
data1[,1]
data$mpg
data1$mpg
data1[,'mpg']
subset("mpg")
subset(data1,select = c(1))
summary(d)
subset_eg2<-subset(data1,select = c(mpg,vs))
subset_eg3<-subset(data1,select = c(mpg:disp))
subset_eg3
subset_eg4<-subset(data1,select = c(1:4))
#condition to select rows in a dataset
subset(data1,c(mpg>25),select = c(hp))
#condition to select rows in a dataset
subset(data1,mpg>25,select = hp)
names(data1)
#select all the class that have mpg >25 and cylinders 6
subset(data1,c(mpg>25,cyl==6))
#select all the class that have mpg >25 and cylinders 6
subset(data1,c(mpg>25,cyl==4),select = )
#select all the cars that have mpg >25 and cylinders 6
subset(data1,c(mpg>25,cyl == 4))
subset(data1,mpg>25 & cyl == 4)
#subset all the cars that are either mpg <25 or cyl = 4
subset(data1,mpg<25 | cyl == 4)
#subset all the cars that are either mpg <25 or cyl = 4
subset(data1,mpg<25 || cyl == 4)
#subset all the cars that are either mpg <25 or cyl = 4
subset(data1,mpg<25 | cyl == 4)
#or
subset(data1,mpg<25 || cyl == 4)
#or
subset(data1,mpg>25 and cyl == 4)
#or
subset(data1,mpg>25 && cyl == 4)
#or
subset(data1,mpg>25 && cyl == 4)
#sort the data in descending order of mpg
sort(data1,TRUE)
#sort the data in descending order of mpg
sort(data1,mpg,TRUE)
#sort the data in descending order of mpg
sort(data1$mpg,TRUE)
#sort the data in descending order of mpg
sort(data1,decreasing = TRUE)
#sort the data in descending order of mpg
sorted = data1[order(data1$mpg, decreasing = TRUE),]
sorted
#highest mpg
sorted = data1[order(data1$mpg, decreasing = TRUE),][1,]
#highest mpg
sorted1 = data1[order(data1$mpg, decreasing = TRUE),][1,]
#sort the data in descending order of mpg
sorted = data1[order(data1$mpg, decreasing = TRUE),]
sorted
#highest mpg
sorted1 = data1[order(data1$mpg, decreasing = TRUE),][1,]
sorted1
#data is not sorted
max(data1)
#extract how many cylinders this car has
data1[which.max(data1$mpg)]
#extract how many cylinders this car has
data1[which.max(data1$mpg)]
#extract how many cylinders this car has
data1[which.max(data1$mpg)]
#extract how many cylinders this car has
data1[which.max("mpg"")]
#extract how many cylinders this car has
data1[which.max("mpg")]
#extract how many cylinders this car has
data1[which.max((data1$mpg))]
#extract how many cylinders this car has
data1[which.max((data1$mpg))]
#extract how many cylinders this car has
data1[which.max((data1$mpg,))]
#extract how many cylinders this car has
data1[which.max((data1$mpg),)]
#extract how many cylinders this car has
data1[which.max(data1$mpg),]
m = max(data_cars$mpg)
m = max(data1$mpg)
data1[data1$mpg==m,]
#for a set if two records are highest and have the same stats|features
m = max(data1$mpg)
data1[data1$mpg==m,]
#use subset to extract row names and number
m = min(data1$mpg)
data1[data1$mpg==m,]
#for a set if two records are highest and have the same stats|features
m = max(data1$mpg)
data1[data1$mpg==m,]
#create a column $grade if mpg > 25 then grade == 1 and mpg < 25 then grade == 2
df = mtcars
#create a column $grade if mpg > 25 then grade == 1 and mpg < 25 then grade == 2
data1$grade = ifelse(df$mpg>25,1,2)
#create a column $grade if mpg > 25 then grade == 1 and mpg < 25 then grade == 2
df1 = data1$grade = ifelse(df$mpg>25,1,2)
df1
data1
data1$grade1 = ifelse(df$mpg>25,"Good","BAD")
data1.head()
data1.head
head(data1)
#create another column if mpg > 25 good, 25 > mpg > 20 average , < 20 is bad
data1$grade2 = ifelse(sorted$mpg>25,"1",ifelse(sorted$mpg>18,"2","3"))
data1
#create another column if mpg > 25 good, 25 > mpg > 20 average , < 20 is bad
data1$grade2 = ifelse(sorted$mpg>25,"1",ifelse(sorted$mpg>18,"2","3"))
#Eg: Print a multiplication table in R
data = mtcars
data
data.names()
names(data)
df <- subset(data, 'carb'==4, select = 'mpg')
df
df <- subset(data, c('carb'==4), select = c('mpg'))
df
df <- subset(data,select = c('mpg','disp'),c('cyl')==4)
df
df <- subset(data,cyl == 4,mpg)
df
df <- subset(data,cyl == 4,c(mpg,cyl))
df
data[which.max('mpg')]
subset(data, c(mpg > 25) & c(cyl == 6))
subset(data, mpg > 25 & cyl == 6)
subset(data, mpg < 25 & cyl == 6)
subset(data, c(mpg < 25 & cyl == 4))
subset(data, c(mpg > 25 & cyl == 4))
subset(data, c(mpg<25 & cyl == 4))
data = mtcars
data
subset(data, c(mpg<25 & cyl == 4))
subset(data, c(mpg < 25 || cyl == 4))
#sort the data in descending order of mpg
sorted = sort(mpg,decreasing = TRUE)[1,]
#sort the data in descending order of mpg
sorted = sort(data['mpg'],decreasing = TRUE)[1,]
#sort the data in descending order of mpg
sorted = sort(data['mpg'],decreasing = TRUE)
#sort the data in descending order of mpg
sorted = data[order(data$mpg),decreasing=TRUE][1,]
#sort the data in descending order of mpg
sorted = (data['mpg'],decreasing=TRUE)[1,]
#sort the data in descending order of mpg
sorted = data(order(['mpg'],decreasing=TRUE))[1,]
#sort the data in descending order of mpg
order(data['mpg'],decreasing = TRUE)[1,]
#sort the data in descending order of mpg
sorted = order(data['mpg'],decreasing = TRUE)[1,]
#sort the data in descending order of mpg
sorted = order(data$mpg,decreasing = TRUE)[1,]
#sort the data in descending order of mpg
sorted = data(order(data$mpg,decreasing = TRUE))[1,]
#sort the data in descending order of mpg
sorted = order(data$mpg,decreasing=TRUE)
sorted
sorted[1,]
sorted[,1]
#sort the data in descending order of mpg
sorted = order(data$mpg,decreasing=TRUE)[1,]
#sort the data in descending order of mpg
sorted = data[order(data$mpg,decreasing=TRUE)][1,]
#sort the data in descending order of mpg
sorted = data[order(data$mpg,decreasing=TRUE)](1,)
#sort the data in descending order of mpg
sorted = data[order(data$mpg,decreasing=TRUE),][1,]
data.frame(x=c("Age","Class","Year"),row.names = c(1,2,3))
data.frame(age=c(10,11,12),class=c(6,7,8),year=c(2011,2010,2012)),row.names = c(1,2,3))
d = data.frame(age=c(10,11,12),class=c(6,7,8),year=c(2011,2010,2012))
d
x = data.frame(age=c(20,19,29),class=c("Mudit","Rohil","Vaibhav"),year==c(2011,2012,2013))
x = data.frame(age=c(20,19,29),class=c("Mudit","Rohil","Vaibhav"),year=c(2011,2012,2013))
x
data = mtcars
data
df1 = data[which.max(mpg)]
df1 = data[which.max(data$mpg)]
df1 = data[which.max(data$mpg),]
df1
x[2,3]
x
#Different ways to subset a dataset
subset_eg1<-subset(data1,select = c(1))
subset_eg1
#Different ways to subset a dataset
subset_eg1<-subset(data1,select = c(1))
subset_eg2<-subset(data1,select = c(mpg,vs))
subset_eg3<-subset(data1,select = c(mpg:disp))
subset_eg4<-subset(data1,select = c(1:4))
#condition to select rows mpg greater than 25 in mtcars dataset
subset(data1,mpg>25,select = hp)
#create a column $grade if mpg > 25 then grade == 1 and mpg < 25 then grade == 2
df1 = data1$grade = ifelse(df$mpg>25,1,2)
df1
help(databases)
help(load(databases))
library()
library(datasets)
r = library(datasets)
r
library(datasets)
r = library(datasets)
r = library(datasets)
r
help(library(datasets))
data()
#create another column if mpg > 25 good, 25 > mpg > 20 average , < 20 is bad
data1$grade2 = ifelse(sorted$mpg>25,"1",ifelse(sorted$mpg>18,"2","3"))
?centralImputation
??centralImputation
?centralvalue
??centralvalue
install.packages("quantmod")
rm(list=ls(all=TRUE))
library(quantmod)
start <- as.Date("2017-01-01")
end <- as.Date("2017-11-01")
getSymbols("GOOGL", src = "yahoo", from = start, to = end)
View(GOOGL)
GOOGL$GOOGL.Close
data <- GOOGL$GOOGL.Close
str(data)
head(data)
#search NA values
sum(is.na(data))
#total number of rows
nrow(data)
rm(list=ls(all=TRUE))
#scrape YAHOO for google stock price
install.packages("quantmod")
library(quantmod)
start <- as.Date("2017-01-01")
end <- as.Date("2017-11-01")
getSymbols("GOOGL", src = "yahoo", from = start, to = end)
install.packages("quantmod")
tail(data)
tail(data)
#add a column of date in data
data$date=as.Date(data$date,format="%Y-%m-%d")
data$date
#add a column of date in data
data$date <- as.Date(data$date,format="%Y-%m-%d")
#add a column of date in data
data$dates <- as.Date(data$dates,format="%Y-%m-%d")
View(GOOGL)
#add library for running sql to group by date
library(sqldf)
data_daily<- sqldf("select Date,GOOGL.Close as max_closing_price from GOOGL group by Date")
GOOGL
table(GOOGL)
start
google <- getSymbols("GOOGL", src = "yahoo", from = start, to = end)
data_daily<- sqldf("select Date,GOOGL.Close as max_closing_price from google group by Date")
rm(list=ls(all=TRUE))
library(quantmod)
start <- as.Date("2017-01-01")
end <- as.Date("2017-11-01")
getSymbols("GOOGL", src = "yahoo", from = start, to = end)
#EDA
str(data)
head(data)
#search NA values
sum(is.na(data))
#total number of rows
nrow(data)
#add library for running sql to group by date
library(sqldf)
#EDA
str(data)
head(data)
#EDA
str(GOOGL)
#writing the data in a CSV file
write.csv(GOOGL,'google_stock.csv', row.names=F)
#reading the file
data <- read.csv('google_stock.csv',header=TRUE)
data
rm(list=ls(all=TRUE))
start <- as.Date("2017-01-01")
end <- as.Date("2017-11-01")
getSymbols("GOOGL", src = "yahoo", from = start, to = end)
#writing the data in a CSV file
write.csv(GOOGL,'google_stock.csv', row.names=TRUE)
#reading the file
data <- read.csv('google_stock.csv',header=TRUE)
View(data)
getSymbols("GOOGL", src = "yahoo", from = start, to = end)
sa.xts
as.xts
?as.xts
#using scrape data of stock and converting to data frame
stock <- as.xts(data.frame(GOOGL = GOOGL[,"GOOGL.Close"]))
View(stock)
wd()
cwd()
setwd("C:/Users/Mudit/Desktop/INSOFE/HOTe4_time_series")
#writing the data in a CSV file
write.csv(stock,'stock.csv', row.names=F)
#reading the file
data <- read.csv('stock.csv',header=TRUE)
View(data)
rm(list=ls(all=TRUE))
#scrape YAHOO for google stock price
install.packages("quantmod")
#scrape YAHOO for google stock price
#install.packages("quantmod")
library(quantmod)
start <- as.Date("2017-01-01")
end <- as.Date("2017-11-01")
getSymbols("GOOGL", src = "yahoo", from = start, to = end)
#using scrape data of stock and converting to data frame
stock <- as.xts(data.frame(GOOGL = GOOGL[,"GOOGL.Close"]))
data_daily<- sqldf("select Date,GOOGL.Close as max_closing_price from stock group by Date")
#using scrape data of stock and converting to data frame
stock <- as.xts(data.frame(GOOGL = GOOGL[date ,"GOOGL.Close"]))
library(xts)
stocks <- xts(df[,-1], order.by=as.Date(df[,1], "%m/%d/%Y"))
stocks <- xts(GOOGL[,-1], order.by=as.Date(df[,1], "%m/%d/%Y"))
#using scrape data of stock and converting to data frame
stock <- data.frame(date,GOOGL = GOOGL[,"GOOGL.Close"])
#using scrape data of stock and converting to data frame
stock <- data.frame(,GOOGL = GOOGL[,"GOOGL.Close"])
#using scrape data of stock and converting to data frame
stock <- as.xts(data.frame(,GOOGL = GOOGL[,"GOOGL.Close"]))
#using scrape data of stock and converting to data frame
stock <- as.xts(data.frame(GOOGL = GOOGL[,"GOOGL.Close"]))
data_Daily<- sqldf("select Date,GOOGL.Close as price from stock group by Date")
table(stcok)
table(stock)
stock$Date <- as.Date(as.character(stock$Date))
stock$Date
View(stock)
write.csv(stock, 'stcok.csv', row.names = F)
dat <- read.table(GOOGLE,header=TRUE)
dat <- read.table(GOOGL,header=TRUE)
data <- as.data.frame(GOOGLE)
data <- as.data.frame(GOOGL)
data
write.csv(data,'stock.csv',row.names = F)
rm(list=ls(all=TRUE))
data <- read.table(GOOGL,header=TRUE,sep=",")
#using scrape data of stock and converting to data frame
stock <- as.xts(data.frame(GOOGL = GOOGL[,1:5]))
getSymbols("GOOGL", src = "yahoo", from = start, to = end)
rm(list=ls(all=TRUE))
#scrape YAHOO for google stock price
#install.packages("quantmod")
library(quantmod)
start <- as.Date("2017-01-01")
end <- as.Date("2017-11-01")
getSymbols("GOOGL", src = "yahoo", from = start, to = end)
#using scrape data of stock and converting to data frame
stock <- as.xts(data.frame(GOOGL = GOOGL[,"GOOGL.Close"]))
stock
