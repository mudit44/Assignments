#Read the file.
data <- read.csv('BackOrders.csv',header=TRUE)
str(data)
summary(data)
head(data)
#Converted a variable to factor
data$sku <- as.factor(data$sku)
#Sum of NA's
sum(is.na(data))
#to check which column has the highest number of NAs.
sapply(data, function(x) sum(is.na(x)))
# Just noting things down
# If You need NA count of all — table(is.na273(z))
# If you need NA count Column wise – sapply(z, function(x) sum(is.na273(x)))
# If you need NA count Row wise — rowSums(is.na273(z))
#Splitting data into train and test without imputing.
set.seed(123)
rows = seq(1,nrow(data),1)
set.seed(123)
trainRows = sample(rows,(70*nrow(data))/100)
train = data[trainRows,]
test = data[-trainRows,]
train_sku <- train$sku
test_sku <- test$sku
#rm('trainRows')
# Segregating train in train_num and & train_cat
train_cat <- train[,sapply(train,is.factor)]
train_cat$sku <- NULL
train_num <- train[,sapply(train,is.numeric)]
# Segregating test in test_num & test_cat
test_cat <- test[,sapply(test, is.factor)]
test_cat$sku <- NULL
test_num <- train[,sapply(test, is.numeric)]
ifelse(train_cat,1,0)
ifelse(train_cat$potential_issue,1,0)
ifelse(train_cat$potential_issue=='yes',1,0)
train_cat$potential_issue
test_cat$potential_issue
#now applying ifelse over categorcial attributes to convert them to 1 or 0 levels
as.integer(as.logical(train_cat$potential_issue))
rm(list=ls())
#Read the file.
data <- read.csv('BackOrders.csv',header=TRUE)
str(data)
summary(data)
head(data)
#Converted a variable to factor
data$sku <- as.factor(data$sku)
#Sum of NA's
sum(is.na(data))
#to check which column has the highest number of NAs.
sapply(data, function(x) sum(is.na(x)))
# Just noting things down
# If You need NA count of all — table(is.na273(z))
# If you need NA count Column wise – sapply(z, function(x) sum(is.na273(x)))
# If you need NA count Row wise — rowSums(is.na273(z))
#Splitting data into train and test without imputing.
set.seed(123)
rows = seq(1,nrow(data),1)
set.seed(123)
trainRows = sample(rows,(70*nrow(data))/100)
train = data[trainRows,]
test = data[-trainRows,]
train_sku <- train$sku
test_sku <- test$sku
#rm('trainRows')
# Segregating train in train_num and & train_cat
train_cat <- train[,sapply(train,is.factor)]
train_cat$sku <- NULL
train_num <- train[,sapply(train,is.numeric)]
# Segregating test in test_num & test_cat
test_cat <- test[,sapply(test, is.factor)]
test_cat$sku <- NULL
test_num <- train[,sapply(test, is.numeric)]
#now applying ifelse over categorcial attributes to convert them to 1 or 0 levels
for (col in cols) set(train_cat, j = col, value = +(train_cat[[col]]=="Yes"))
#now applying ifelse over categorcial attributes to convert them to 1 or 0 levels
for (col in names(train_cat)) set(train_cat, j = col, value = +(train_cat[[col]]=="Yes"))
#now applying ifelse over categorcial attributes to convert them to 1 or 0 levels
library(dplyr)
train_cat
#now applying ifelse over categorcial attributes to convert them to 1 or 0 levels
train_cat[train_cat=="Yes"] <- 1
rm(list=ls())
#Read the file.
data <- read.csv('BackOrders.csv',header=TRUE)
str(data)
summary(data)
head(data)
#Converted a variable to factor
data$sku <- as.factor(data$sku)
#Sum of NA's
sum(is.na(data))
#to check which column has the highest number of NAs.
sapply(data, function(x) sum(is.na(x)))
# Just noting things down
# If You need NA count of all — table(is.na273(z))
# If you need NA count Column wise – sapply(z, function(x) sum(is.na273(x)))
# If you need NA count Row wise — rowSums(is.na273(z))
#Splitting data into train and test without imputing.
set.seed(123)
rows = seq(1,nrow(data),1)
set.seed(123)
trainRows = sample(rows,(70*nrow(data))/100)
train = data[trainRows,]
test = data[-trainRows,]
train_sku <- train$sku
test_sku <- test$sku
#rm('trainRows')
# Segregating train in train_num and & train_cat
train_cat <- train[,sapply(train,is.factor)]
train_cat$sku <- NULL
train_num <- train[,sapply(train,is.numeric)]
# Segregating test in test_num & test_cat
test_cat <- test[,sapply(test, is.factor)]
test_cat$sku <- NULL
test_num <- train[,sapply(test, is.numeric)]
#now applying ifelse over categorcial attributes to convert them to 1 or 0 levels
train_cat$potential_issue <- ifelse(train_cat=="yes",1,0)
train_cat$deck_risk <- ifelse(train_cat="yes",1,0)
train_cat$deck_risk <- ifelse(train_cat="Yes",1,0)
train_cat$potential_issue
rm(list=ls())
#Read the file.
data <- read.csv('BackOrders.csv',header=TRUE)
str(data)
summary(data)
head(data)
#Converted a variable to factor
data$sku <- as.factor(data$sku)
#Sum of NA's
sum(is.na(data))
#to check which column has the highest number of NAs.
sapply(data, function(x) sum(is.na(x)))
# Just noting things down
# If You need NA count of all — table(is.na273(z))
# If you need NA count Column wise – sapply(z, function(x) sum(is.na273(x)))
# If you need NA count Row wise — rowSums(is.na273(z))
#Splitting data into train and test without imputing.
set.seed(123)
rows = seq(1,nrow(data),1)
set.seed(123)
trainRows = sample(rows,(70*nrow(data))/100)
train = data[trainRows,]
test = data[-trainRows,]
train_sku <- train$sku
test_sku <- test$sku
#rm('trainRows')
# Segregating train in train_num and & train_cat
train_cat <- train[,sapply(train,is.factor)]
train_cat$sku <- NULL
train_num <- train[,sapply(train,is.numeric)]
# Segregating test in test_num & test_cat
test_cat <- test[,sapply(test, is.factor)]
test_cat$sku <- NULL
test_num <- train[,sapply(test, is.numeric)]
#now applying ifelse over categorcial attributes to convert them to 1 or 0 levels
train_cat$potential_issue <- ifelse(train_cat$potential_issue=="yes",1,0)
train_cat$deck_risk <- ifelse(train_cat$deck_risk="Yes",1,0)
train_cat$deck_risk <- ifelse(train_cat$deck_risk=="yes",1,0)
train_cat$oe_constraint <- ifelse(train_cat$oe_constraint=='yes',1,0)
train_cat$ppap_risk <- ifelse(train_cat$ppap_risk=='yes',1,0)
rm(list=ls())
#Read the file.
data <- read.csv('BackOrders.csv',header=TRUE)
str(data)
summary(data)
head(data)
#Converted a variable to factor
data$sku <- as.factor(data$sku)
#Sum of NA's
sum(is.na(data))
#to check which column has the highest number of NAs.
sapply(data, function(x) sum(is.na(x)))
# Just noting things down
# If You need NA count of all — table(is.na273(z))
# If you need NA count Column wise – sapply(z, function(x) sum(is.na273(x)))
# If you need NA count Row wise — rowSums(is.na273(z))
#Splitting data into train and test without imputing.
set.seed(123)
rows = seq(1,nrow(data),1)
set.seed(123)
trainRows = sample(rows,(70*nrow(data))/100)
train = data[trainRows,]
test = data[-trainRows,]
train_sku <- train$sku
test_sku <- test$sku
#rm('trainRows')
# Segregating train in train_num and & train_cat
train_cat <- train[,sapply(train,is.factor)]
train_cat$sku <- NULL
train_num <- train[,sapply(train,is.numeric)]
# Segregating test in test_num & test_cat
test_cat <- test[,sapply(test, is.factor)]
test_cat$sku <- NULL
test_num <- train[,sapply(test, is.numeric)]
train_cat$went_on_backorder <- ifelse(train_cat$went_on_backorder=='yes',1,0)
test_cat$went_on_backorder <- ifelse(test_cat$went_on_backorder=='yes',1,0)
#finding mode function
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
sum(is.na(train_num))
getmode(train_num$lead_time)
#centralImputation on train_cat
library(DMwR)
train_num <- centralImputation(train_num)
getmode(train_num$lead_time)
test_num$lead_time[is.na(test_num$lead_time)] <- 8
# Now taking the mean and sd of the train_num
train_mean <- apply(train_num,2,mean)
train_sd <- apply(train_num,2,sd)
# Standardizing the train_num
std_train <- sweep(sweep(train_num,2,train_mean),2,train_sd,"/")
train_standard <- data.frame(cbind(std_train,train_cat))
std_test <- sweep(sweep(test_num,2,train_mean),2,train_sd,"/")
test_standard <- data.frame(cbind(std_test,test_cat))
rm(list=ls())
#Read the file.
data <- read.csv('BackOrders.csv',header=TRUE)
str(data)
summary(data)
head(data)
#Converted a variable to factor
data$sku <- as.factor(data$sku)
#Sum of NA's
sum(is.na(data))
#to check which column has the highest number of NAs.
sapply(data, function(x) sum(is.na(x)))
# Just noting things down
# If You need NA count of all — table(is.na273(z))
# If you need NA count Column wise – sapply(z, function(x) sum(is.na273(x)))
# If you need NA count Row wise — rowSums(is.na273(z))
#Splitting data into train and test without imputing.
set.seed(123)
rows = seq(1,nrow(data),1)
set.seed(123)
trainRows = sample(rows,(70*nrow(data))/100)
train = data[trainRows,]
test = data[-trainRows,]
train_sku <- train$sku
test_sku <- test$sku
#rm('trainRows')
# Segregating train in train_num and & train_cat
train_cat <- train[,sapply(train,is.factor)]
train_cat$sku <- NULL
train_num <- train[,sapply(train,is.numeric)]
# Segregating test in test_num & test_cat
test_cat <- test[,sapply(test, is.factor)]
test_cat$sku <- NULL
test_num <- train[,sapply(test, is.numeric)]
# #now applying ifelse over categorcial attributes to convert them to 1 or 0 levels
# train_cat$potential_issue <- ifelse(train_cat$potential_issue=="yes",1,0)
# train_cat$deck_risk <- ifelse(train_cat$deck_risk=="yes",1,0)
# train_cat$oe_constraint <- ifelse(train_cat$oe_constraint=='yes',1,0)
# train_cat$ppap_risk <- ifelse(train_cat$ppap_risk=='yes',1,0)
train_cat$went_on_backorder <- ifelse(train_cat$went_on_backorder=='yes',1,0)
test_cat$went_on_backorder <- ifelse(test_cat$went_on_backorder=='yes',1,0)
#finding mode function
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
sum(is.na(train_num))
#centralImputation on train_cat
library(DMwR)
#Imputing NAs in train_num with centralImputation
train_num <- centralImputation(train_num)
getmode(train_num$lead_time)
#impute mode manually in test_num$lead_time
test_num$lead_time[is.na(test_num$lead_time)] <- 8
# # Now taking the mean and sd of the train_num
# train_mean <- apply(train_num,2,mean)
# train_sd <- apply(train_num,2,sd)
#
# # Standardizing the train_num
# std_train <- sweep(sweep(train_num,2,train_mean),2,train_sd,"/")
# train_standard <- data.frame(cbind(std_train,train_cat))
# #train_standard is the final dataset for the train dataset
#
# std_test <- sweep(sweep(test_num,2,train_mean),2,train_sd,"/")
# test_standard <- data.frame(cbind(std_test,test_cat))
# #test_standard is the final dataset for the test dataset
rm('trainRows')
# rm('trainRows')
# Now taking the mean and sd of the train_num
train_mean <- apply(train_num,2,mean)
train_sd <- apply(train_num,2,sd)
# Standardizing the train_num
std_train <- sweep(sweep(train_num,2,train_mean),2,train_sd,"/")
train_standard <- data.frame(cbind(std_train,train_cat))
std_test <- sweep(sweep(test_num,2,train_mean),2,train_sd,"/")
rm('std_test')
rm(list=ls())
#Read the file.
data <- read.csv('BackOrders.csv',header=TRUE)
str(data)
summary(data)
head(data)
#Converted a variable to factor
data$sku <- as.factor(data$sku)
#Sum of NA's
sum(is.na(data))
#to check which column has the highest number of NAs.
sapply(data, function(x) sum(is.na(x)))
#Splitting data into train and test without imputing.
set.seed(123)
rows = seq(1,nrow(data),1)
set.seed(123)
trainRows = sample(rows,(70*nrow(data))/100)
train = data[trainRows,]
test = data[-trainRows,]
train_sku <- train$sku
test_sku <- test$sku
# Segregating train in train_num and & train_cat
train_cat <- train[,sapply(train,is.factor)]
train_cat$sku <- NULL
train_num <- train[,sapply(train,is.numeric)]
# Segregating test in test_num & test_cat
test_cat <- test[,sapply(test, is.factor)]
test_cat$sku <- NULL
test_num <- train[,sapply(test, is.numeric)]
rm(list=ls())
#Read the file.
data <- read.csv('BackOrders.csv',header=TRUE)
str(data)
summary(data)
head(data)
#Converted a variable to factor
data$sku <- as.factor(data$sku)
#Sum of NA's
sum(is.na(data))
#to check which column has the highest number of NAs.
sapply(data, function(x) sum(is.na(x)))
# Just noting things down
# If You need NA count of all — table(is.na273(z))
# If you need NA count Column wise – sapply(z, function(x) sum(is.na273(x)))
# If you need NA count Row wise — rowSums(is.na273(z))
#Splitting data into train and test without imputing.
set.seed(123)
rows = seq(1,nrow(data),1)
set.seed(123)
trainRows = sample(rows,(70*nrow(data))/100)
train = data[trainRows,]
test = data[-trainRows,]
train_sku <- train$sku
test_sku <- test$sku
#rm('trainRows')
# Segregating train in train_num and & train_cat
train_cat <- train[,sapply(train,is.factor)]
train_cat$sku <- NULL
train_num <- train[,sapply(train,is.numeric)]
# Segregating test in test_num & test_cat
test_cat <- test[,sapply(test, is.factor)]
test_cat$sku <- NULL
test_num <- test[,sapply(test, is.numeric)]
train_cat$went_on_backorder <- ifelse(train_cat$went_on_backorder=='yes',1,0)
test_cat$went_on_backorder <- ifelse(test_cat$went_on_backorder=='yes',1,0)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
sum(is.na(train_num))
#centralImputation on train_cat
library(DMwR)
#Imputing NAs in train_num with centralImputation
train_num <- centralImputation(train_num)
getmode(train_num$lead_time)
#impute mode manually in test_num$lead_time
test_num$lead_time[is.na(test_num$lead_time)] <- 8
# rm('trainRows')
# Now taking the mean and sd of the train_num
train_mean <- apply(train_num,2,mean)
train_sd <- apply(train_num,2,sd)
# Standardizing the train_num
std_train <- sweep(sweep(train_num,2,train_mean),2,train_sd,"/")
train_standard <- data.frame(cbind(std_train,train_cat))
rm('std_test')
#rm('std_test')
std_test <- sweep(sweep(test_num,2,train_mean),2,train_sd,"/")
test_standard <- data.frame(cbind(std_test,test_cat))
train_standard
train_standard$sku <- train_sku
test_standard$sku <- test_sku
log_reg <- glm(y~., data = train_data, family = binomial)
summary(log_reg)
View(train_standard)
log_reg <- glm(went_on_backorder~., data = train_standard, family = binomial)
summary(log_reg)
rm(list=ls())
#Read the file.
data <- read.csv('BackOrders.csv',header=TRUE)
rm(list=ls())
rm(list=ls())
#Read the file.
data <- read.csv('BackOrders.csv',header=TRUE)
str(data)
summary(data)
head(data)
#Converted a variable to factor
data$sku <- as.factor(data$sku)
#Sum of NA's
sum(is.na(data))
#to check which column has the highest number of NAs.
sapply(data, function(x) sum(is.na(x)))
#Splitting data into train and test without imputing.
set.seed(123)
rows = seq(1,nrow(data),1)
set.seed(123)
trainRows = sample(rows,(70*nrow(data))/100)
train = data[trainRows,]
test = data[-trainRows,]
train_cat$went_on_backorder <- ifelse(train_cat$went_on_backorder=='yes',1,0)
train$went_on_backorder <- ifelse(train$went_on_backorder=='yes',1,0)
test$went_on_backorder <- ifelse(test$went_on_backorder=='yes',1,0)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
sum(is.na(train_num))
sum(is.na(train))
#centralImputation on train_cat
library(DMwR)
#Imputing NAs in train_num with centralImputation
train_num <- centralImputation(train)
getmode(train$lead_time)
#impute mode manually in test_num$lead_time
test$lead_time[is.na(test$lead_time)] <- 8
log_reg <- glm(went_on_backorder~., data = train, family = binomial)
rm(list=ls())
#Read the file.
data <- read.csv('BackOrders.csv',header=TRUE)
str(data)
summary(data)
head(data)
#Converted a variable to factor
data$sku <- as.factor(data$sku)
str(data)
#Sum of NA's
sum(is.na(data))
#to check which column has the highest number of NAs.
sapply(data, function(x) sum(is.na(x)))
# Just noting things down
# If You need NA count of all - table(is.na273(z))
# If you need NA count Column wise - sapply(z, function(x) sum(is.na273(x)))
# If you need NA count Row wise - rowSums(is.na273(z))
#Splitting data into train and test without imputing.
set.seed(123)
rows = seq(1,nrow(data),1)
set.seed(123)
trainRows = sample(rows,(20*nrow(data))/100)
?predict
?colnames
rm(list=ls())
setwd("C:/Users/Mudit/Desktop/INSOFE/HOTe3/Batch40_CSE_7302c_HOTe03_Naive_Bayes")
data <- read.csv('germandata.csv')
str(data)
summary(data)
#EDA
data[,which(sum(is.na()))]
#EDA
data[,sum(is.na(names(data)))]
#EDA
sapply(data, function(x) sum(is.na(x)))
#giving column heading
colnames(data) <- c('status_of_existing_checking_account','duration_in_month','credit_history',
'purpose','credit_amount','saving_account_bonds','present_installment_since',
'install_rate_in_percent',
'personal_status_sex','debtors_guarantors','present_residence_since',
'property','age','other_install','housing','existing_credits','job',
'no_of_people_liable','telephone','foreign_worker','target')
names(data)
head(data)
str(data)
#Now let us build Naive Bayes logistic regression model
rows=seq(1,nrow(data),1)
set.seed(123)
trainRows=sample(rows,round(nrow(data)*0.6))
testRows=rows[-(trainRows)]
data_train = data[trainRows,]
rm(list=ls())
data <- read.csv('germandata.csv')
str(data)
summary(data)
#EDA
sapply(data, function(x) sum(is.na(x)))
#giving column heading
colnames(data) <- c('status_of_existing_checking_account','duration_in_month','credit_history',
'purpose','credit_amount','saving_account_bonds','present_installment_since',
'install_rate_in_percent',
'personal_status_sex','debtors_guarantors','present_residence_since',
'property','age','other_install','housing','existing_credits','job',
'no_of_people_liable','telephone','foreign_worker','target')
names(data)
head(data)
str(data)
#Now let us build Naive Bayes logistic regression model
rows=seq(1,nrow(data),1)
set.seed(123)
trainRows=sample(rows,round(nrow(data)*0.6))
data_train = data[trainRows,]
data_test=data[-trainRows,]
# Build a model
library(e1071)
model = naiveBayes(target ~ ., data = data_train)
model
pred = predict(model, data_train)
table(pred, data_train$target)
pred = predict(model, data_test)
table(pred, data_test$Flight.Status)
table(pred, data_test$target)
