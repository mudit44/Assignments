df1
x[2,3]
x
#Different ways to subset a dataset
subset_eg1<-subset(data1,select = c(1))
subset_eg1
#Different ways to subset a dataset
subset_eg1<-subset(data1,select = c(1))
subset_eg2<-subset(data1,select = c(mpg,vs))
subset_eg3<-subset(data1,select = c(mpg:disp))
subset_eg4<-subset(data1,select = c(1:4))
#condition to select rows mpg greater than 25 in mtcars dataset
subset(data1,mpg>25,select = hp)
#create a column $grade if mpg > 25 then grade == 1 and mpg < 25 then grade == 2
df1 = data1$grade = ifelse(df$mpg>25,1,2)
df1
help(databases)
help(load(databases))
library()
library(datasets)
r = library(datasets)
r
library(datasets)
r = library(datasets)
r = library(datasets)
r
help(library(datasets))
data()
#create another column if mpg > 25 good, 25 > mpg > 20 average , < 20 is bad
data1$grade2 = ifelse(sorted$mpg>25,"1",ifelse(sorted$mpg>18,"2","3"))
?centralImputation
??centralImputation
?centralvalue
??centralvalue
rm(list=ls(all=TRUE))
#scrape YAHOO for google stock price
#install.packages("quantmod")
library(quantmod)
start <- as.Date("2017-01-01")
end <- as.Date("2017-11-01")
getSymbols("GOOGL", src = "yahoo", from = start, to = end)
#for extracting dates use index function(library:zoo)
dates <- as.data.frame(index(GOOGL))
names(dates) <- c('dates')
#write dates as csv file
write.csv(dates,'dates.csv',row.names = F)
#extracting GOOGL.Close price from OHLC
stock <- as.xts(data.frame(GOOGL = GOOGL[,"GOOGL.Close"]))
#change the name of the column
names(stock) <- c('close')
#write stock prices as csv file
write.csv(stock,'stock.csv',row.names = F)
#cbind dates and stock prices
data <- cbind.data.frame(dates,stock)
#write the cbind'ed' data variable into a merged file
write.csv(data,'final.csv',row.names = F)
#read final.csv in another variable
data2 <- read.csv('final.csv',header=T)
str(data2)
#converting data2$dates to dates from factors
data2$dates <- as.Date(data2$dates,format="%Y-%m-%d")
data2$week <- as.numeric(format(data2$dates, format="%Y.%W"))
data2$Week <- as.numeric(format(data2$dates, format="%Y.%W"))
write.csv(data2,'finaldata.csv',row.names = F)
data2 <- read.csv('finaldata.csv',header = TRUE)
data2
data2$Week <- NULL
data2
#dividing data as tain and test
train <- data2[which(data2$week <= 2017.44),]
test <- data2[which(data2$dates > 2017.44),]
test <- data2[which(data2$week > 2017.44),]
#dividing data as tain and test
train <- data2[which(data2$week <= 2017.44),]
test <- data2[which(data2$week > 2017.44),]
#prepare data2 for time series by applying ts keeping frequency as 7
price <- ts(train$close , frequency = 7)
#plot price
plot(price,type="l",lwd=3,col="blue",xlab="day",ylab="price", main="Time series plot")
#decomposition of the above plot in trend, seasonality and randomness
pricedecomp <- decompose(price)
#smoothing
fitsma <- SMA(price,n=7)
length(fitsma)
#plot simple, weighted and exponential moving averages
par(mfrow=c(2,2))
plot(train$close, type="l", col="black")
plot(SMA(price,n=7), type="l", col="red")
plot(WMA(price,n=7), type="l", col="blue")
plot(EMA(price,n=7), type="l", col="brown")
#compiled into one graph
par(mfrow=c(1,1))
plot(train$close, type="l", col="black")
lines(SMA(price,n=5), col="red")
lines(WMA(price,n=5), col="blue")
lines(EMA(price,n=5), col="brown")
#building Holt Winter's model
#with trend 'Beta' as positive
hw_forecast <-  HoltWinters(price,  beta=TRUE, gamma=FALSE)
head(hw_forecast$fitted)
#with both trend and seasonality 'beta' and 'gamma' as positive
hw_forecast2 <-  HoltWinters(price, beta=TRUE, gamma=TRUE,
seasonal="additive")
#for forecasting
library("forecast")
hw_price_forecasts = forecast(hw_forecast2,h=2)
test_preds <- data.frame(hw_price_forecasts)$Point.Forecast
test_actuals <- test$close
DMwR::regr.eval(test_actuals,test_preds)
----------------------------------------#-----------------------------------------------
#ARIMA models
library("forecast")
par(mfrow=(c(1,2)))
pacf(price)
acf(price)
ndiffs(price) #choose d from here; OR check manually
plot(pacf(diff(price),1, lag.max = 30))#choose p from here
plot(acf(diff(price),1)) #choose q from here
##
model1 <- Arima(price,c(1,1,0))
model1
pred_train = fitted(model1)
pred_validation <- data.frame(forecast(model1,h=2))$Point.Forecast
##
model1 <- Arima(price,c(1,1,0))
model1
pred_train = fitted(model1)
pred_test <- data.frame(forecast(model1,h=2))$Point.Forecast
DMwR::regr.eval(train$close, pred_train )
DMwR::regr.eval(test$close, pred_validation )
DMwR::regr.eval(test$close, pred_test )
model1 <- Arima(price,c(1,1,0))
model1
pred_train = fitted(model1)
pred_test <- data.frame(forecast(model1,h=2))$Point.Forecast
DMwR::regr.eval(train$close, pred_train )
DMwR::regr.eval(test$close, pred_test )
##
model1 <- Arima(price,c(1,1,0))
model1
pred_train = fitted(model1)
#### ARIMA models
library("forecast")
par(mfrow=(c(1,2)))
pacf(Price)
acf(Price)
----------------------------------------#-----------------------------------------------
#ARIMA models
library("forecast")
par(mfrow=(c(1,2)))
pacf(price)
acf(price)
ndiffs(price) #choose d from here; OR check manually
plot(pacf(diff(price),1, lag.max = 30))#choose p from here
plot(acf(diff(price),1)) #choose q from here
##
model1 <- Arima(price,c(1,1,0))
model1
pred_train = fitted(model1)
pred_test <- data.frame(forecast(model1,h=2))$Point.Forecast
pred_test
DMwR::regr.eval(train$close, pred_train )
DMwR::regr.eval(test$close, pred_test )
#dividing data as tain and test
train <- data2[which(data2$week <= 2017.44),]
test <- data2[which(data2$week > 2017.44),]
#prepare data2 for time series by applying ts keeping frequency as 7
price <- ts(train$close , frequency = 7)
#plot price
plot(price,type="l",lwd=3,col="blue",xlab="day",ylab="price", main="Time series plot")
#decomposition of the above plot in trend, seasonality and randomness
pricedecomp <- decompose(price)
plot(pricedecomp)
#smoothing
fitsma <- SMA(price,n=7)
length(fitsma)
#plot simple, weighted and exponential moving averages
par(mfrow=c(2,2))
plot(train$close, type="l", col="black")
plot(SMA(price,n=7), type="l", col="red")
plot(WMA(price,n=7), type="l", col="blue")
plot(EMA(price,n=7), type="l", col="brown")
#compiled into one graph
par(mfrow=c(1,1))
plot(train$close, type="l", col="black")
lines(SMA(price,n=5), col="red")
lines(WMA(price,n=5), col="blue")
lines(EMA(price,n=5), col="brown")
#building Holt Winter's model
#with trend 'Beta' as positive
hw_forecast <-  HoltWinters(price,  beta=TRUE, gamma=FALSE)
head(hw_forecast$fitted)
#with both trend and seasonality 'beta' and 'gamma' as positive
hw_forecast2 <-  HoltWinters(price, beta=TRUE, gamma=TRUE,
seasonal="additive")
#for forecasting
library("forecast")
hw_price_forecasts = forecast(hw_forecast2,h=2)
test_preds <- data.frame(hw_price_forecasts)$Point.Forecast
test$close
pred_test
----------------------------------------#-----------------------------------------------
#ARIMA models
library("forecast")
par(mfrow=(c(1,2)))
pacf(price)
acf(price)
ndiffs(price) #choose d from here; OR check manually
plot(pacf(diff(price),1, lag.max = 30))#choose p from here
plot(acf(diff(price),1)) #choose q from here
##
model1 <- Arima(price,c(1,1,0))
model1
pred_train = fitted(model1)
pred_test <- data.frame(forecast(model1,h=2))$Point.Forecast
pred_test
pred_train
DMwR::regr.eval(train$close, pred_train )
DMwR::regr.eval(test$close, pred_test )
pred_test <- data.frame(forecast(model1,h=2))$Point.Forecast
pred_test
?forecast
test$close
test
test <- data2[which(data2$week > 2017.44),]
test
test <- data2[which(data2$week > 2017.42),]
test
#dividing data as tain and test
train <- data2[which(data2$week <= 2017.43),]
test <- data2[which(data2$week > 2017.43),]
#prepare data2 for time series by applying ts keeping frequency as 7
price <- ts(train$close , frequency = 7)
#plot price
plot(price,type="l",lwd=3,col="blue",xlab="day",ylab="price", main="Time series plot")
#decomposition of the above plot in trend, seasonality and randomness
pricedecomp <- decompose(price)
plot(pricedecomp)
#smoothing
fitsma <- SMA(price,n=7)
length(fitsma)
#plot simple, weighted and exponential moving averages
par(mfrow=c(2,2))
plot(train$close, type="l", col="black")
plot(SMA(price,n=7), type="l", col="red")
plot(WMA(price,n=7), type="l", col="blue")
plot(EMA(price,n=7), type="l", col="brown")
#compiled into one graph
par(mfrow=c(1,1))
plot(train$close, type="l", col="black")
lines(SMA(price,n=5), col="red")
lines(WMA(price,n=5), col="blue")
lines(EMA(price,n=5), col="brown")
#building Holt Winter's model
#with trend 'Beta' as positive
hw_forecast <-  HoltWinters(price,  beta=TRUE, gamma=FALSE)
head(hw_forecast$fitted)
#with both trend and seasonality 'beta' and 'gamma' as positive
hw_forecast2 <-  HoltWinters(price, beta=TRUE, gamma=TRUE,
seasonal="additive")
#for forecasting
library("forecast")
hw_price_forecasts = forecast(hw_forecast2,h=2)
test_preds <- data.frame(hw_price_forecasts)$Point.Forecast
test_actuals <- test$close
DMwR::regr.eval(test_actuals,test_preds)
----------------------------------------#-----------------------------------------------
#ARIMA models
library("forecast")
par(mfrow=(c(1,2)))
----------------------------------------#-----------------------------------------------
#ARIMA models
library("forecast")
----------------------------------------#-----------------------------------------------
#ARIMA models
library("forecast")
#for forecasting
library("forecast")
hw_price_forecasts = forecast(hw_forecast2,h=2)
test_preds <- data.frame(hw_price_forecasts)$Point.Forecast
test_actuals
test$close
test_preds
#dividing data as tain and test
train <- data2[which(data2$week <= 2017.43),]
train
test
#prepare data2 for time series by applying ts keeping frequency as 7
price <- ts(train$close , frequency = 0.84)
#plot price
plot(price,type="l",lwd=3,col="blue",xlab="day",ylab="price", main="Time series plot")
#decomposition of the above plot in trend, seasonality and randomness
pricedecomp <- decompose(price)
plot(pricedecomp)
#smoothing
fitsma <- SMA(price,n=7)
length(fitsma)
#plot simple, weighted and exponential moving averages
par(mfrow=c(2,2))
plot(train$close, type="l", col="black")
plot(SMA(price,n=7), type="l", col="red")
plot(WMA(price,n=7), type="l", col="blue")
#decomposition of the above plot in trend, seasonality and randomness
pricedecomp <- decompose(price)
#prepare data2 for time series by applying ts keeping frequency as 7
price <- ts(train$close , frequency = 7)
#plot price
plot(price,type="l",lwd=3,col="blue",xlab="day",ylab="price", main="Time series plot")
#decomposition of the above plot in trend, seasonality and randomness
pricedecomp <- decompose(price)
plot(pricedecomp)
#prepare data2 for time series by applying ts keeping frequency as 7
price <- ts(train$close , frequency = 1)
#plot price
plot(price,type="l",lwd=3,col="blue",xlab="day",ylab="price", main="Time series plot")
#decomposition of the above plot in trend, seasonality and randomness
pricedecomp <- decompose(price)
#prepare data2 for time series by applying ts keeping frequency as 7
price <- ts(train$close , frequency = 0)
#plot price
plot(price,type="l",lwd=3,col="blue",xlab="day",ylab="price", main="Time series plot")
#decomposition of the above plot in trend, seasonality and randomness
pricedecomp <- decompose(price)
#prepare data2 for time series by applying ts keeping frequency as 7
price <- ts(train$close , frequency = 52)
#plot price
plot(price,type="l",lwd=3,col="blue",xlab="day",ylab="price", main="Time series plot")
#decomposition of the above plot in trend, seasonality and randomness
pricedecomp <- decompose(price)
plot(pricedecomp)
#plot price
plot(price,type="l",lwd=3,col="blue",xlab="day",ylab="price", main="Time series plot")
#decomposition of the above plot in trend, seasonality and randomness
pricedecomp <- decompose(price)
plot(pricedecomp)
#smoothing
fitsma <- SMA(price,n=7)
length(fitsma)
#plot simple, weighted and exponential moving averages
par(mfrow=c(2,2))
plot(train$close, type="l", col="black")
plot(SMA(price,n=7), type="l", col="red")
plot(WMA(price,n=7), type="l", col="blue")
plot(EMA(price,n=7), type="l", col="brown")
#compiled into one graph
par(mfrow=c(1,1))
plot(train$close, type="l", col="black")
lines(SMA(price,n=5), col="red")
lines(WMA(price,n=5), col="blue")
lines(EMA(price,n=5), col="brown")
#building Holt Winter's model
#with trend 'Beta' as positive
hw_forecast <-  HoltWinters(price,  beta=TRUE, gamma=FALSE)
head(hw_forecast$fitted)
#with both trend and seasonality 'beta' and 'gamma' as positive
hw_forecast2 <-  HoltWinters(price, beta=TRUE, gamma=TRUE,
seasonal="additive")
#for forecasting
library("forecast")
hw_price_forecasts = forecast(hw_forecast2,h=2)
test_preds <- data.frame(hw_price_forecasts)$Point.Forecast
test_actuals <- test$close
DMwR::regr.eval(test_actuals,test_preds)
----------------------------------------#-----------------------------------------------
#ARIMA models
par(mfrow=(c(1,2)))
pacf(price)
acf(price)
----------------------------------------#-----------------------------------------------
#ARIMA models
par(mfrow=(c(1,2)))
ndiffs(price) #choose d from here; OR check manually
plot(pacf(diff(price),1, lag.max = 30))#choose p from here
plot(acf(diff(price),1)) #choose q from here
##
model1 <- Arima(price,c(1,1,0))
model1
pred_train = fitted(model1)
pred_test <- data.frame(forecast(model1,h=2))$Point.Forecast
#why test$close is numeric(0) ??
DMwR::regr.eval(train$close, pred_train )
DMwR::regr.eval(test$close, pred_test )
train$close
pred_train
test$close
pred_test
#why test$close is numeric(0) ??
DMwR::regr.eval(train$close, pred_train )
DMwR::regr.eval(test$close, pred_test )
##
model2 <- Arima(price,c(0,1,0))
model2
pred_train = fitted(model2)
pred_test <- data.frame(forecast(model2,h=2))$Point.Forecast
DMwR::regr.eval(train$close, pred_train )
DMwR::regr.eval(test$close, pred_test )
##
model3 <- Arima(price,c(1,1,1))
model3
pred_train = fitted(model3)
pred_test <- data.frame(forecast(model3,h=2))$Point.Forecast
DMwR::regr.eval(train$close, pred_train )
DMwR::regr.eval(test$close, pred_validation )
test$close
pred_test
##
model3 <- Arima(price,c(1,1,1))
model3
pred_train = fitted(model3)
pred_test <- data.frame(forecast(model3,h=2))$Point.Forecast
DMwR::regr.eval(train$close, pred_train )
test$close
DMwR::regr.eval(test$close, pred_test )
pred_test
par(mfrow=c(1,3))
plot(model1$residuals,ylim=c(-50,50))
plot(model2$residuals,ylim=c(-50,50))
plot(model3$residuals,ylim=c(-50,50))
#Plot forecasts
par(mfrow=c(1,1))
plot(forecast(model3,h=4))
###Auto-ARIMA
library("forecast")
ARIMA_auto <- auto.arima(price, ic='aic')
summary(ARIMA_auto)
pred_train = fitted(ARIMA_auto)
pred_train
pred_test = forecast(ARIMA_auto, h=13)
pred_test
DMwR::regr.eval(train$close, pred_train )
DMwR::regr.eval(test$close, pred_test )
pred_test = forecast(ARIMA_auto, h=13)
pred_test
DMwR::regr.eval(train$close, pred_train )
DMwR::regr.eval(test$close, pred_test )
pred_test
DMwR::regr.eval(train$close, pred_train )
DMwR::regr.eval(test$close, pred_test )
setwd("C:/Users/Mudit/Desktop/HOTe_INSOFE/HOTe6_diff_algos_on_problem_set/20180425_Batch_40_CSE_7305c_Assignment")
data <- read.csv('bend.csv',header = TRUE)
data <- read.csv('blend.csv',header = TRUE)
data$type <- as.factor(data$type)
data$Target <- as.factor(data$Target)
str(data)
setwd("C:/Users/Mudit/Desktop/HOTe_INSOFE/HOTe6_diff_algos_on_problem_set/20180425_Batch_40_CSE_7305c_Assignment")
write.csv(data,file = 'blend.csv',row.names = FALSE)
rm(list=ls(all=TRUE))
#read the data
data1 <- read.csv('ProductA.csv',header = T)
data2 <- read.csv('ProductB.csv',header = T)
#adding column for classification
data1$type <- rep('A', nrow(data1))
data2$type <- rep('B', nrow(data2))
data <- rbind.data.frame(data1,data2)
#convert to factors
data$type <- as.factor(data$type)
data$Target <- as.factor(data$Target)
str(data)
write.csv(data,file = 'blend.csv',row.names = FALSE)
setwd("C:/Users/Mudit/Desktop/HOTe_INSOFE/HOTe6_diff_algos_on_problem_set/20180425_Batch_40_CSE_7305c_Assignment")
rm(list=ls(all=TRUE))
#read the data
data1 <- read.csv('ProductA.csv',header = T)
data2 <- read.csv('ProductB.csv',header = T)
#adding column for classification
data1$type <- rep(A, nrow(data1))
#adding column for classification
data1$type <- rep('A', nrow(data1))
data1$type
data2$type <- rep('B', nrow(data2))
data2$type
#row bind the two data frames
data <- rbind.data.frame(data1,data2)
#convert to factors
data$type <- as.factor(data$type)
data$type
data$Target <- as.factor(data$Target)
#convert to factors
data$type <- as.factor(data$type)
str(data)
write.csv(data,file = 'blend.csv',row.names = FALSE)
rm(list=ls(all=TRUE))
#read the data
data1 <- read.csv('ProductA.csv',header = T)
data2 <- read.csv('ProductB.csv',header = T)
#adding column for classification
data1$type <- rep('A', nrow(data1))
data2$type <- rep('B', nrow(data2))
#row bind the two data frames
data <- rbind.data.frame(data1,data2)
#convert to factors
#data$type <- as.factor(data$type)
data$Target <- as.factor(data$Target)
str(data)
write.csv(data,file = 'blend.csv',row.names = FALSE)
rm(list=ls(all=TRUE))
#read the data
data1 <- read.csv('ProductA.csv',header = T)
data2 <- read.csv('ProductB.csv',header = T)
#adding column for classification
data1$type <- rep(1, nrow(data1))
data2$type <- rep(2, nrow(data2))
#row bind the two data frames
data <- rbind.data.frame(data1,data2)
#convert to factors
#data$type <- as.factor(data$type)
data$Target <- as.factor(data$Target)
#convert to factors
data$type <- as.factor(data$type)
data$Target <- as.factor(data$Target)
str(data)
write.csv(data,file = 'blend.csv',row.names = FALSE)
